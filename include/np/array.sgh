#ifndef _NPARRAY_SGH_
#define _NPARRAY_SGH_

#include <stdlib.sgh>
#include <string.sgh>
#include <assert.sgh>

#define float_types float,double
#define int_types short,int,long,long long,unsigned short,unsigned int,unsigned long,unsigned long long

#define ops +,*,-,/

#define types float_types,int_types

#define Shape(...) make_shape_t(_var_args_to_ptr(__VA_ARGS__),_n_var_args(__VA_ARGS__))

typedef struct {
    int* raw;
    int n;
} shape_t;

shape_t make_shape_t(int* dims, int n);

//const int* __index__(shape_t dims, int* idxs, int nidx);

const int* __index__(shape_t dims, int idx);

int len(shape_t dims);

void destroy(shape_t dims);

int count(shape_t dims);

shape_t copy(shape_t dims);

string __str__(shape_t dims);

module np;

template <T=types>{

    typedef struct{
        T* raw;
        shape_t shape;
        int size;
    } np.ndarray<T>;

}

template <T=types>{

    np.ndarray<T> np.array<T>(shape_t dims);

    np.ndarray<T> np.ones<T>(shape_t dims);

    np.ndarray<T> np.zeros<T>(shape_t dims);

    T* __index__(np.ndarray<T> arr, int* idxs, int nidx);

    T* __index__(np.ndarray<T> arr, int idx);

    T* __index__(np.ndarray<T> arr, int idx1, int idx2);

    T* __index__(np.ndarray<T> arr, int idx1, int idx2, int idx3);

    T* __index__(np.ndarray<T> arr, int idx1, int idx2, int idx3, int idx4);

    void destroy(np.ndarray<T> arr);

    np.ndarray<T> reshape(np.ndarray<T> arr, shape_t new_dims);

    np.ndarray<T> copy(np.ndarray<T> arr);

    np.ndarray<T> flatten(np.ndarray<T> arr);

    string __str__(np.ndarray<T> arr);

}

template<T1 = types>{

    template<T2 = types>{

        np.ndarray<T2> as_type<T2>(np.ndarray<T1> arr);

    }

}

template<T = float_types>{

    np.ndarray<T> np.linspace<T>(T start, T stop, int n);

}

template<T = types>{

    np.ndarray<T> __add__(np.ndarray<T> l, T r);

    np.ndarray<T> __add__(T r, np.ndarray<T> l);

    np.ndarray<T> __sub__(np.ndarray<T> l, T r);

    np.ndarray<T> __sub__(T r, np.ndarray<T> l);

    np.ndarray<T> __div__(np.ndarray<T> l, T r);

    np.ndarray<T> __div__(T r, np.ndarray<T> l);

    np.ndarray<T> __mul__(np.ndarray<T> l, T r);

    np.ndarray<T> __mul__(T r, np.ndarray<T> l);

}

template<T1 = float_types>{
    template<T = int_types>{

        np.ndarray<T1> __add__(np.ndarray<T1> l, T r);

        np.ndarray<T1> __add__(T r, np.ndarray<T1> l);

        np.ndarray<T1> __sub__(np.ndarray<T1> l, T r);

        np.ndarray<T1> __sub__(T r, np.ndarray<T1> l);

        np.ndarray<T1> __div__(np.ndarray<T1> l, T r);

        np.ndarray<T1> __div__(T r, np.ndarray<T1> l);

        np.ndarray<T1> __mul__(np.ndarray<T1> l, T r);

        np.ndarray<T1> __mul__(T r, np.ndarray<T1> l);

        np.ndarray<T1> __add__(np.ndarray<T> l, T1 r);

        np.ndarray<T1> __add__(T1 r, np.ndarray<T> l);

        np.ndarray<T1> __sub__(np.ndarray<T> l, T1 r);

        np.ndarray<T1> __sub__(T1 r, np.ndarray<T> l);

        np.ndarray<T1> __div__(np.ndarray<T> l, T1 r);

        np.ndarray<T1> __div__(T1 r, np.ndarray<T> l);

        np.ndarray<T1> __mul__(np.ndarray<T> l, T1 r);

        np.ndarray<T1> __mul__(T1 r, np.ndarray<T> l);

    }
}

np.ndarray<double> __add__(np.ndarray<double> l, float r);

np.ndarray<double> __add__(float r, np.ndarray<double> l);

np.ndarray<double> __sub__(np.ndarray<double> l, float r);

np.ndarray<double> __sub__(float r, np.ndarray<double> l);

np.ndarray<double> __div__(np.ndarray<double> l, float r);

np.ndarray<double> __div__(float r, np.ndarray<double> l);

np.ndarray<double> __mul__(np.ndarray<double> l, float r);

np.ndarray<double> __mul__(float r, np.ndarray<double> l);

np.ndarray<double> __add__(np.ndarray<float> l, double r);

np.ndarray<double> __add__(double r, np.ndarray<float> l);

np.ndarray<double> __sub__(np.ndarray<float> l, double r);

np.ndarray<double> __sub__(double r, np.ndarray<float> l);

np.ndarray<double> __div__(np.ndarray<float> l, double r);

np.ndarray<double> __div__(double r, np.ndarray<float> l);

np.ndarray<double> __mul__(np.ndarray<float> l, double r);

np.ndarray<double> __mul__(double r, np.ndarray<float> l);

np.ndarray<float> np.linspace(float start, float stop, int n);

np.ndarray<float> np.ones(shape_t dims);

np.ndarray<float> np.array(shape_t dims);

np.ndarray<float> np.zeros(shape_t dims);

template<T = int_types>{

    np.ndarray<T> np.arange<T>(T start, T stop, T step);

    np.ndarray<T> np.arange<T>(T start, T stop);

    np.ndarray<T> np.arange<T>(T stop);

}

np.ndarray<int> np.arange(int start, int stop, int step);

np.ndarray<int> np.arange(int start, int stop);

np.ndarray<int> np.arange(int stop);

template <T=types>{

    np.ndarray<T> __add__(np.ndarray<T> l, np.ndarray<T> r);

    np.ndarray<T> __sub__(np.ndarray<T> l, np.ndarray<T> r);

    np.ndarray<T> __mul__(np.ndarray<T> l, np.ndarray<T> r);

    np.ndarray<T> __div__(np.ndarray<T> l, np.ndarray<T> r);

}

template <T=types>{

    np.ndarray<T> __add__(np.ndarray<T> l, np.ndarray<T> r);

    np.ndarray<T> __sub__(np.ndarray<T> l, np.ndarray<T> r);

    np.ndarray<T> __mul__(np.ndarray<T> l, np.ndarray<T> r);

    np.ndarray<T> __div__(np.ndarray<T> l, np.ndarray<T> r);

}

template<T1 = float_types>{
    template<T2 = int_types>{

        np.ndarray<T1> __add__(np.ndarray<T1> l, np.ndarray<T2> r);

        np.ndarray<T1> __sub__(np.ndarray<T1> l, np.ndarray<T2> r);

        np.ndarray<T1> __mul__(np.ndarray<T1> l, np.ndarray<T2> r);

        np.ndarray<T1> __div__(np.ndarray<T1> l, np.ndarray<T2> r);

        np.ndarray<T1> __add__(np.ndarray<T2> l, np.ndarray<T1> r);

        np.ndarray<T1> __sub__(np.ndarray<T2> l, np.ndarray<T1> r);

        np.ndarray<T1> __mul__(np.ndarray<T2> l, np.ndarray<T1> r);

        np.ndarray<T1> __div__(np.ndarray<T2> l, np.ndarray<T1> r);

    }
}

np.ndarray<double> __add__(np.ndarray<double> l, np.ndarray<float> r);

np.ndarray<double> __sub__(np.ndarray<double> l, np.ndarray<float> r);

np.ndarray<double> __mul__(np.ndarray<double> l, np.ndarray<float> r);

np.ndarray<double> __div__(np.ndarray<double> l, np.ndarray<float> r);

np.ndarray<double> __add__(np.ndarray<float> l, np.ndarray<double> r);

np.ndarray<double> __sub__(np.ndarray<float> l, np.ndarray<double> r);

np.ndarray<double> __mul__(np.ndarray<float> l, np.ndarray<double> r);

np.ndarray<double> __div__(np.ndarray<float> l, np.ndarray<double> r);

template<T = float_types>{
    np.ndarray<T> np.sin(np.ndarray<T> arr);

    np.ndarray<T> np.cos(np.ndarray<T> arr);

    np.ndarray<T> np.tan(np.ndarray<T> arr);

    np.ndarray<T> np.asin(np.ndarray<T> arr);

    np.ndarray<T> np.acos(np.ndarray<T> arr);

    np.ndarray<T> np.atan(np.ndarray<T> arr);

    T np.sin(T in);

    T np.cos(T in);

    T np.tan(T in);

    T np.asin(T in);

    T np.acos(T in);

    T np.atan(T in);
}

template<T = int_types>{
    np.ndarray<double> np.sin(np.ndarray<T> arr);

    np.ndarray<double> np.cos(np.ndarray<T> arr);

    np.ndarray<double> np.tan(np.ndarray<T> arr);

    np.ndarray<double> np.asin(np.ndarray<T> arr);

    np.ndarray<double> np.acos(np.ndarray<T> arr);

    np.ndarray<double> np.atan(np.ndarray<T> arr);

    double np.sin(T in);

    double np.cos(T in);

    double np.tan(T in);

    double np.asin(T in);

    double np.acos(T in);

    double np.atan(T in);
}

#endif