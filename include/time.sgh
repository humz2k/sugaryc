#ifndef _TIME_SGH_
#define _TIME_SGH_

#include "../cstdlib/time_macros.h"
#include <stdlib.sgh>

#define USECPSEC 1000000ULL

struct tm {
	int	tm_sec;		/* seconds after the minute [0-60] */
	int	tm_min;		/* minutes after the hour [0-59] */
	int	tm_hour;	/* hours since midnight [0-23] */
	int	tm_mday;	/* day of the month [1-31] */
	int	tm_mon;		/* months since January [0-11] */
	int	tm_year;	/* years since 1900 */
	int	tm_wday;	/* days since Sunday [0-6] */
	int	tm_yday;	/* days since January 1 [0-365] */
	int	tm_isdst;	/* Daylight Savings Time flag */
	long	tm_gmtoff;	/* offset from UTC in seconds */
	char	*tm_zone;	/* timezone abbreviation */
};

extern char *asctime(const struct tm *);
extern clock_t clock(void);
extern char *ctime(const time_t *);
extern double difftime(time_t, time_t);
extern struct tm *getdate(const char *);
extern struct tm *gmtime(const time_t *);
extern struct tm *localtime(const time_t *);
extern time_t mktime(struct tm *);
extern size_t strftime(char * __restrict, size_t, const char * __restrict, const struct tm * __restrict);
extern char *strptime(const char * __restrict, const char * __restrict, struct tm * __restrict);
extern time_t time(time_t *);

static inline double CPUTimer(void){
    return clock()/CLOCKS_PER_SEC;
}
static inline double CPUTimer(double start){
    return (clock() - start)/CLOCKS_PER_SEC;
}

#endif