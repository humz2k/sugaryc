#ifndef _LISTS_SGH_
#define _LISTS_SGH_

#define _COMBINE(a,b) a ## b
#define _combine(a, b) _COMBINE(a, b)

#include <string.sgh>

struct void_list_struct;
typedef struct void_list_struct* void_list;

void_list make_void_list(void);

void** __index__(void_list lst, int* idxs, int nidxs);

int append(void_list lst, void* item);

void* pop(void_list lst);
void* pop(void_list lst, int idx);
int insert(void_list lst, int idx, void* item);
int len(void_list lst);

#define list(t) _combine(t,_list)

#define inst_list(t,name) struct _combine(name,_struct){\
                            void_list raw_list;\
                        };\
                        typedef struct _combine(name,_struct)* name;\
                        static inline name _combine(make_,name)(void){\
                            name out = (name)GC_malloc(sizeof(struct _combine(name,_struct)));\
                            out->raw_list = make_void_list();\
                            return out;\
                        }\
                        static inline t* __index__(name my_list,int* idxs, int nidxs){\
                            return (t*)__index__(my_list->raw_list,idxs,nidxs);\
                        }\
                        static inline int append(name my_list, t item){\
                            return append(my_list->raw_list,(void*)item);\
                        }\
                        static inline t pop(name my_list){\
                            return (t)pop(my_list->raw_list);\
                        }\
                        static inline t pop(name my_list, int idx){\
                            return (t)pop(my_list->raw_list,idx);\
                        }\
                        static inline int insert(name my_list, int idx, t item){\
                            return insert(my_list->raw_list,idx,(void*)item);\
                        }\
                        static inline int len(name my_list){\
                            return len(my_list->raw_list);\
                        }\
                        static inline string __str__(name my_list){\
                            string out = "[";\
                            int length = len(my_list);\
                            for (int i = 0; i < length - 1; i++){\
                                out += to_str(my_list[i]) + ", ";\
                            }\
                            if (length > 0){\
                                out += to_str(my_list[length - 1]);\
                            }\
                            out += "]";\
                            return out;\
                        }


inst_list(string,string_list);

#endif