#ifndef _SGCCMPI_H_
#define _SGCCMPI_H_
#include <stdlib.sgh>
#include "openmpi_config.sgh"
#include <mpi.h>
#include <np/array.sgh>

module mpi;

typedef struct{
    MPI_Comm raw_comm;
    int rank;
    int size;
} mpi.comm;

int comm_rank(mpi.comm comm);

int comm_size(mpi.comm comm);

int mpi.comm_rank(mpi.comm comm);

int mpi.comm_size(mpi.comm comm);

mpi.comm mpi.get_comm_world(void);

extern mpi.comm mpi.comm_world;

int mpi.init(int* argc, char*** argv);

int mpi.init();

int mpi.finalize();

template <T=np_array_types>{

    int mpi.send(np.ndarray<T> arr, int dest, int tag, mpi.comm comm);

    int send(np.ndarray<T> arr, int dest, int tag, mpi.comm comm);

    int mpi.recv(np.ndarray<T> arr, int source, int tag, mpi.comm comm);

    int recv(np.ndarray<T> arr, int source, int tag, mpi.comm comm);

    int mpi.sendrecv(np.ndarray<T> sendbuf, int dest, int sendtag, np.ndarray<T> recvbuf, int source, int recvtag, mpi.comm comm);

}

#endif
