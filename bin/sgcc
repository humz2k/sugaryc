#!/usr/bin/env python3

import json
import sys
import os
sys.path = [os.path.abspath(os.path.join(os.path.dirname( __file__ ), '..'))] + sys.path
from pycparser import c_generator, parse_file, c_ast, ParseError
from pysgcc import *
import argparse
import re

def run_echo(command,echo):
    if echo:
        print(command)
    os.system(command)

def format_location(location):
    return "\033[1m" + location['file'] + ":" + str(location['line']) + ":" + str(location['column']) + "\033[0m"

def print_error(error):
    kind = error['kind']
    if kind == 'error':
        error_msg = "\033[1;31m" + kind + ":\033[0;0m "
    else:
        error_msg = kind
    message = error['message']
    pattern = r"'.*'"
    done = False
    for match in re.findall(pattern,message):
        message = message.replace(match,"'\033[1m" + match[1:-1] + "\033[0m'")
    error_msg += message
    error_msg = format_location(error["locations"][0]['caret']) + ": " + error_msg
    print(error_msg)

def call_c_preprocessor(inp,cxx,includes=[],echo = False, keep_temp = False):
    tmp_file = inp + "__tmp1_sgcc.tmp"
    cpp_args = ['-E',r'-I' + os.path.join(os.path.abspath(os.path.join(os.path.dirname( __file__ ), '..')),"include")] + includes + ['-xc',inp,'-o',tmp_file]
    cpp_call = cxx + " " + " ".join(cpp_args)

    run_echo(cpp_call,echo)

    with open(tmp_file,"r") as f:
        raw = f.read()

    if not keep_temp:
        os.remove(tmp_file)

    return raw

def preprocess_file(raw,echo = False):
    before = raw
    while True:
        raw = handle_modules(raw)
        raw = handle_templates(raw)
        raw = handle_generated(raw)
        raw = handle_struct_templates(raw)
        raw = handle_foreach(raw)
        if before == raw:
            break
        before = raw
    raw = "#define __generate(...) \n #define bool _Bool \n #define true ((_Bool)1) \n #define false ((_Bool)0) \n" + raw
    return raw

def parse_string(raw,cxx,inp,keep_temp):
    tmp_file = inp + "__tmp2_sgcc.tmp"
    
    with open(tmp_file,"w") as f:
        f.write(raw)

    try:
        ast = parse_file(tmp_file, use_cpp=True, cpp_path=cxx,cpp_args=['-E','-xc'])
    except ParseError as e:
        print("\033[1;31m SYNTAX ERROR\033[0m:",e)
        exit()
    
    if not keep_temp:
        try:
            os.remove(tmp_file)
        except:
            pass

    return ast

def append_ops(out,ops_name = "ops.hpp"):
    with open(os.path.join(os.path.dirname( __file__ ),ops_name),"r") as ops:
        out = ops.read() + out + """\ntemplate<typename T>
static inline const char* to_str(T in){
    return __str__(in);
}\n"""
    return out

def call_cxx(out,outfile,echo,openmp,O,keep_temp,cxx):
    temp_file = outfile.split(".")[0] + "__sgc_tmp.cpp"

    with open(temp_file,"w") as f:
        f.write(out)

    error_file = "__sgc_errors" + temp_file.replace("/","_") + ".json"

    command = cxx + " -O" + str(O) + " " + " -c " + temp_file + " -o " + outfile + " -Wno-c++11-extensions -fdiagnostics-format=json"
    if (openmp):
        command += " -fopenmp"
    command += " > /dev/null 2> " + error_file

    run_echo(command,echo)

    with open(error_file,"r") as f:
        errors = f.read()
    os.remove(error_file)

    if errors.strip() == "error: invalid value 'json' in '-fdiagnostics-format json'":
        command = cxx + " -O" + str(O) + " " + " -c " + temp_file + " -o " + outfile + " -Wno-c++11-extensions"
        if (openmp):
            command += " -fopenmp"
        command += " > /dev/null 2> " + error_file

        if (echo):
            print(command)

        os.system(command)

        with open(error_file,"r") as f:
            errors = f.read()
        os.remove(error_file)


    try:
        errors = json.loads(errors)
        for i in errors:
            print_error(i)
    except:
        print(errors)

    if (not keep_temp):
        try:
            os.remove(temp_file)
        except:
            pass
    
    return errors
    
def compile_file(inp,outfile,includes=[],O=1,cxx = "g++", keep_temp = False, echo = False, openmp = True):

    reset_generated()

    raw = call_c_preprocessor(inp,cxx,includes=includes,echo=echo,keep_temp=keep_temp)

    raw = preprocess_file(raw,echo=echo)

    ast = parse_string(raw,cxx=cxx,inp=inp,keep_temp=keep_temp)
    
    generator = c_generator.CGenerator()

    KernelFixer().visit(ast)

    out = generator.visit(ast)

    out = append_ops(out)

    errors = call_cxx(out,outfile=outfile,echo=echo,openmp=openmp,O=O,keep_temp=keep_temp,cxx=cxx)

    return len(errors)

if __name__ == "__main__":

    default_cxx = os.getenv('SGCC_CXX')
    if default_cxx is None:
        default_cxx = "g++"

    parser = argparse.ArgumentParser(description="Compile .sgc")
    parser.add_argument('files',metavar="<source>",type=str, nargs='+')
    parser.add_argument('-o',metavar="<output>",type=str,default="a.out")
    parser.add_argument('-cxx',metavar="<cxx>",type=str,default="none")
    parser.add_argument('-c',action='store_true',default=False)
    parser.add_argument('-O',metavar="<opt>",type=int,default=3)
    parser.add_argument('--echo',action='store_true',default=False)
    parser.add_argument('-I',metavar="<I>",type=str,action="append")
    parser.add_argument('-L',metavar="<L>",type=str,action="append")
    parser.add_argument('-l',metavar="<l>",type=str,action="append")
    parser.add_argument('-framework',metavar="<framework>",type=str,action="append")
    parser.add_argument('--parallel',action='store_true',default=True)
    parser.add_argument('--save-temps','-S',action='store_true',default=False)

    args = parser.parse_args()
    to_compile = [i for i in args.files if i.endswith(".sgc")]
    to_link = [i for i in args.files if not i.endswith(".sgc")]
    to_link.append(os.path.join(os.path.abspath(os.path.join(os.path.dirname( __file__ ), '..')),"ext/bdwgc/libgc.a"))
    to_link.append(os.path.join(os.path.abspath(os.path.join(os.path.dirname( __file__ ), '..')),"stdlib/libsgc.a"))
    includes = []
    link_dir = []
    links = []
    frameworks = []
    try:
        includes = ["-I" + i for i in args.I]
    except:
        pass
    try:
        link_dir = ["-L" + i for i in args.L]
    except:
        pass
    try:
        links = ["-l" + i for i in args.l]
    except:
        pass
    try:
        frameworks = ["-framework " + i for i in args.framework]
    except:
        pass

    cxx = args.cxx
    if cxx == "none":
        cxx = find_compiler(args.echo)

    if (args.c):
        compile_file(to_compile[0],args.o,includes,O = args.O,cxx = cxx,keep_temp = args.save_temps, echo = args.echo, openmp = not args.parallel)

    else:
        intermediate_outputs = [i.split(".")[0] + "__tmp.o" for i in to_compile]
        
        for i,j in zip(to_compile,intermediate_outputs):
            if compile_file(i,j,includes,O = args.O,cxx = cxx,keep_temp = args.save_temps, echo = args.echo, openmp = not args.parallel) != 0:
                exit()

        link_command = cxx + " -o " + args.o + " -O" + str(args.O) + " " + " ".join(intermediate_outputs + to_link) + " " + " ".join(includes + link_dir + links + frameworks)

        if (not args.parallel):
            link_command += " -fopenmp"

        if (args.echo):
            print(link_command)

        os.system(link_command)

        for i in intermediate_outputs:
            try:
                os.remove(i)
            except:
                pass
    