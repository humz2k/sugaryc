#define __generate(...) 
 #define bool _Bool 
 #define true 1 
 #define false 0 
# 0 "test.sgc"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "test.sgc"
# 1 "/Users/humzaqureshi/GitHub/sugaryc/include/stdlib.sgh" 1




extern void* malloc(long unsigned int);

extern void free(void*);
# 16 "/Users/humzaqureshi/GitHub/sugaryc/include/stdlib.sgh"
# 1 "/Users/humzaqureshi/GitHub/sugaryc/include/print.sgh" 1



const char* __str__(const char* s);

const char* __str__(float f);
const char* __str__(double f);

const char* __str__(short a);

const char* __str__(int a);

const char* __str__(long int a);

const char* __str__(long long int a);
# 17 "/Users/humzaqureshi/GitHub/sugaryc/include/stdlib.sgh" 2

# 1 "/Users/humzaqureshi/GitHub/sugaryc/include/int_tuple.sgh" 1



struct _int_tuple;

typedef struct _int_tuple* int_tuple;

int_tuple make_int_tuple(int* raw, int length);

const int* __index__(int_tuple t, int* idx, int nidx);

int len(int_tuple t);

const char* __str__(int_tuple t);
# 19 "/Users/humzaqureshi/GitHub/sugaryc/include/stdlib.sgh" 2

# 1 "/Users/humzaqureshi/GitHub/sugaryc/include/vector_types.sgh" 1




# 1 "/Users/humzaqureshi/GitHub/sugaryc/include/vector_definition.sgh" 1




# 1 "/Users/humzaqureshi/GitHub/sugaryc/include/string.sgh" 1



typedef const char* string;

string __add__(string left, string right);

string __mul__(string left, int right);

string __mul__(int left, string right);

int __eq__(string left, string right);

int __neq__(string left, string right);

int len(string str);
# 6 "/Users/humzaqureshi/GitHub/sugaryc/include/vector_definition.sgh" 2
# 20 "/Users/humzaqureshi/GitHub/sugaryc/include/vector_definition.sgh"
typedef struct {
    float x;
    float y;
} float2;

static inline float2 make_float2(float x, float y){
    float2 out;
    out.x = x;
    out.y = y;
    return out;
}

static inline string __str__(float2 vec){
    string out = "float2" + "{" + to_str(vec.x) + ", " + to_str(vec.y) + "}";
    return out;
}

typedef struct {
    float x;
    float y;
    float z;
} float3;

static inline float3 make_float3(float x, float y, float z){
    float3 out;
    out.x = x;
    out.y = y;
    out.z = z;
    return out;
}

static inline string __str__(float3 vec){
    string out = "float3" + "{" + to_str(vec.x) + ", " + to_str(vec.y) + ", " + to_str(vec.z) + "}";
    return out;
}

typedef struct {
    float x;
    float y;
    float z;
    float w;
} float4;

static inline float4 make_float4(float x, float y, float z, float w){
    float4 out;
    out.x = x;
    out.y = y;
    out.z = z;
    out.w = w;
    return out;
}

static inline string __str__(float4 vec){
    string out = "float4" + "{" + to_str(vec.x) + ", " + to_str(vec.y) + ", " + to_str(vec.z) + ", " + to_str(vec.w) + "}";
    return out;
}
# 6 "/Users/humzaqureshi/GitHub/sugaryc/include/vector_types.sgh" 2



# 1 "/Users/humzaqureshi/GitHub/sugaryc/include/vector_definition.sgh" 1
# 20 "/Users/humzaqureshi/GitHub/sugaryc/include/vector_definition.sgh"
typedef struct {
    double x;
    double y;
} double2;

static inline double2 make_double2(double x, double y){
    double2 out;
    out.x = x;
    out.y = y;
    return out;
}

static inline string __str__(double2 vec){
    string out = "double2" + "{" + to_str(vec.x) + ", " + to_str(vec.y) + "}";
    return out;
}

typedef struct {
    double x;
    double y;
    double z;
} double3;

static inline double3 make_double3(double x, double y, double z){
    double3 out;
    out.x = x;
    out.y = y;
    out.z = z;
    return out;
}

static inline string __str__(double3 vec){
    string out = "double3" + "{" + to_str(vec.x) + ", " + to_str(vec.y) + ", " + to_str(vec.z) + "}";
    return out;
}

typedef struct {
    double x;
    double y;
    double z;
    double w;
} double4;

static inline double4 make_double4(double x, double y, double z, double w){
    double4 out;
    out.x = x;
    out.y = y;
    out.z = z;
    out.w = w;
    return out;
}

static inline string __str__(double4 vec){
    string out = "double4" + "{" + to_str(vec.x) + ", " + to_str(vec.y) + ", " + to_str(vec.z) + ", " + to_str(vec.w) + "}";
    return out;
}
# 10 "/Users/humzaqureshi/GitHub/sugaryc/include/vector_types.sgh" 2



# 1 "/Users/humzaqureshi/GitHub/sugaryc/include/vector_definition.sgh" 1
# 20 "/Users/humzaqureshi/GitHub/sugaryc/include/vector_definition.sgh"
typedef struct {
    short x;
    short y;
} short2;

static inline short2 make_short2(short x, short y){
    short2 out;
    out.x = x;
    out.y = y;
    return out;
}

static inline string __str__(short2 vec){
    string out = "short2" + "{" + to_str(vec.x) + ", " + to_str(vec.y) + "}";
    return out;
}

typedef struct {
    short x;
    short y;
    short z;
} short3;

static inline short3 make_short3(short x, short y, short z){
    short3 out;
    out.x = x;
    out.y = y;
    out.z = z;
    return out;
}

static inline string __str__(short3 vec){
    string out = "short3" + "{" + to_str(vec.x) + ", " + to_str(vec.y) + ", " + to_str(vec.z) + "}";
    return out;
}

typedef struct {
    short x;
    short y;
    short z;
    short w;
} short4;

static inline short4 make_short4(short x, short y, short z, short w){
    short4 out;
    out.x = x;
    out.y = y;
    out.z = z;
    out.w = w;
    return out;
}

static inline string __str__(short4 vec){
    string out = "short4" + "{" + to_str(vec.x) + ", " + to_str(vec.y) + ", " + to_str(vec.z) + ", " + to_str(vec.w) + "}";
    return out;
}
# 14 "/Users/humzaqureshi/GitHub/sugaryc/include/vector_types.sgh" 2



# 1 "/Users/humzaqureshi/GitHub/sugaryc/include/vector_definition.sgh" 1
# 20 "/Users/humzaqureshi/GitHub/sugaryc/include/vector_definition.sgh"
typedef struct {
    int x;
    int y;
} int2;

static inline int2 make_int2(int x, int y){
    int2 out;
    out.x = x;
    out.y = y;
    return out;
}

static inline string __str__(int2 vec){
    string out = "int2" + "{" + to_str(vec.x) + ", " + to_str(vec.y) + "}";
    return out;
}

typedef struct {
    int x;
    int y;
    int z;
} int3;

static inline int3 make_int3(int x, int y, int z){
    int3 out;
    out.x = x;
    out.y = y;
    out.z = z;
    return out;
}

static inline string __str__(int3 vec){
    string out = "int3" + "{" + to_str(vec.x) + ", " + to_str(vec.y) + ", " + to_str(vec.z) + "}";
    return out;
}

typedef struct {
    int x;
    int y;
    int z;
    int w;
} int4;

static inline int4 make_int4(int x, int y, int z, int w){
    int4 out;
    out.x = x;
    out.y = y;
    out.z = z;
    out.w = w;
    return out;
}

static inline string __str__(int4 vec){
    string out = "int4" + "{" + to_str(vec.x) + ", " + to_str(vec.y) + ", " + to_str(vec.z) + ", " + to_str(vec.w) + "}";
    return out;
}
# 18 "/Users/humzaqureshi/GitHub/sugaryc/include/vector_types.sgh" 2



# 1 "/Users/humzaqureshi/GitHub/sugaryc/include/vector_definition.sgh" 1
# 20 "/Users/humzaqureshi/GitHub/sugaryc/include/vector_definition.sgh"
typedef struct {
    long x;
    long y;
} long2;

static inline long2 make_long2(long x, long y){
    long2 out;
    out.x = x;
    out.y = y;
    return out;
}

static inline string __str__(long2 vec){
    string out = "long2" + "{" + to_str(vec.x) + ", " + to_str(vec.y) + "}";
    return out;
}

typedef struct {
    long x;
    long y;
    long z;
} long3;

static inline long3 make_long3(long x, long y, long z){
    long3 out;
    out.x = x;
    out.y = y;
    out.z = z;
    return out;
}

static inline string __str__(long3 vec){
    string out = "long3" + "{" + to_str(vec.x) + ", " + to_str(vec.y) + ", " + to_str(vec.z) + "}";
    return out;
}

typedef struct {
    long x;
    long y;
    long z;
    long w;
} long4;

static inline long4 make_long4(long x, long y, long z, long w){
    long4 out;
    out.x = x;
    out.y = y;
    out.z = z;
    out.w = w;
    return out;
}

static inline string __str__(long4 vec){
    string out = "long4" + "{" + to_str(vec.x) + ", " + to_str(vec.y) + ", " + to_str(vec.z) + ", " + to_str(vec.w) + "}";
    return out;
}
# 22 "/Users/humzaqureshi/GitHub/sugaryc/include/vector_types.sgh" 2
# 21 "/Users/humzaqureshi/GitHub/sugaryc/include/stdlib.sgh" 2
# 2 "test.sgc" 2
# 1 "/Users/humzaqureshi/GitHub/sugaryc/include/assert.sgh" 1
# 3 "test.sgc" 2








    struct list_struct__template__int{
        int* raw;
        int length;
        int n_allocated;
    };

    typedef struct list_struct__template__int* std__list__template__int;

    static inline std__list__template__int std__make_list__template__int(void){
        std__list__template__int out = (std__list__template__int)GC_malloc(sizeof(struct list_struct__template__int));
        if (!(out != nullptr)){printf("%s: FAILED\n","out != NULL"); exit(1);};
        out->length = 0;
        out->n_allocated = 10;
        out->raw = (int*)GC_malloc(sizeof(int) * 10);
        if (!(out->raw != nullptr)){printf("%s: FAILED\n","out->raw != NULL"); exit(1);};
        return out;
    }

    static inline void append(std__list__template__int lst, int val){
        if (!(lst != nullptr)){printf("%s: FAILED\n","lst != NULL"); exit(1);};
        if (!(lst->length >= 0)){printf("%s: FAILED\n","lst->length >= 0"); exit(1);};
        if (!(lst->length < lst->n_allocated)){
            lst->n_allocated += 10;
            lst->raw = (int*)GC_realloc(lst->raw,sizeof(int) * lst->n_allocated);
            if (!(lst->raw != nullptr)){printf("%s: FAILED\n","lst->raw != NULL"); exit(1);};
        }
        if (!(lst->length < lst->n_allocated)){printf("%s: FAILED\n","lst->length < lst->n_allocated"); exit(1);};
        lst->raw[lst->length] = val;
        lst->length++;
        return;
    }

    static inline int pop(std__list__template__int lst, int idx){
        if (!(lst != nullptr)){printf("%s: FAILED\n","lst != NULL"); exit(1);};
        if (!(idx < lst->length)){printf("%s: FAILED\n","idx < lst->length"); exit(1);};
        int out = lst->raw[idx];
        for (int i = idx; i < (lst->length-1); i++){
            lst->raw[i] = lst->raw[i+1];
        }
        lst->length--;
        if ((lst->n_allocated - lst->length) > 10){
            lst->n_allocated -= 10;
            if (!(lst->n_allocated > 0)){printf("%s: FAILED\n","lst->n_allocated > 0"); exit(1);};
            if (!(lst->n_allocated >= lst->length)){printf("%s: FAILED\n","lst->n_allocated >= lst->length"); exit(1);};
            lst->raw = (int*)GC_realloc(lst->raw,sizeof(int) * lst->n_allocated);
        }
        return out;
    }

    static inline int pop(std__list__template__int lst){
        if (!(lst != nullptr)){printf("%s: FAILED\n","lst != NULL"); exit(1);};
        if (!(lst->length > 0)){printf("%s: FAILED\n","lst->length > 0"); exit(1);};
        return pop(lst,lst->length-1);
    }

    static inline int len(std__list__template__int lst){
        if (!(lst != nullptr)){printf("%s: FAILED\n","lst != NULL"); exit(1);};
        return lst->length;
    }

    static inline void insert(std__list__template__int lst, int idx, int value){
        if (!(lst != nullptr)){printf("%s: FAILED\n","lst != NULL"); exit(1);};
        if (!(idx < lst->length)){printf("%s: FAILED\n","idx < lst->length"); exit(1);};
        if (!((lst->length+1) < lst->n_allocated)){
            lst->n_allocated += 10;
            lst->raw = (int*)GC_realloc(lst->raw,sizeof(int) * lst->n_allocated);
            if (!(lst->raw != nullptr)){printf("%s: FAILED\n","lst->raw != NULL"); exit(1);};
        }
        for (int i = lst->length-1; i >= idx; i--){
            lst->raw[i+1] = lst->raw[i];
        }
        lst->raw[idx] = value;
        lst->length++;

    }

    static inline int* __index__(std__list__template__int lst, int* idxs, int n){
        if (!(lst != nullptr)){printf("%s: FAILED\n","lst != NULL"); exit(1);};
        if (!(n == 1)){printf("%s: FAILED\n","n == 1"); exit(1);};
        int idx = idxs[0];
        if (!(idx < lst->length)){printf("%s: FAILED\n","idx < lst->length"); exit(1);};
        if (!(lst->raw != nullptr)){printf("%s: FAILED\n","lst->raw != NULL"); exit(1);};
        return &(lst->raw[idx]);
    }

    static inline string __str__(std__list__template__int lst){
        string out = "[";
        for (int i = 0; i < lst->length-1; i++){
            out += to_str(lst->raw[i]) + ", ";
        }
        if (lst->length > 0){
            out += to_str(lst->raw[lst->length-1]);
        }
        out += "]";
        return out;
    }


__generate(std__list_std__make_list__T)



int main(){

    auto my_list = std__make_list__template__int();
    println(my_list);
    for (int i = 0; i < 5; i++){
        my_list.append(i);
        println(my_list,len(my_list));
    }
    my_list.insert(1,10);
    println(my_list,len(my_list));
# 131 "test.sgc"
    return 0;
}
